namespace flatbuf;

/// The format for serializing a queue message.
table QueueMessage {
    /// The unique identifier generated by the client API.
    unique_id: [ubyte];

    /// The pipelines to process.
    pipelines: [Pipeline];

    /// The API caller's payload of the message.
    payload: [ubyte];

    /// The destination where the payload will be sent.
    destination_http_request: QueueMessageDestinationHttpRequest;
}

table Pipeline {
    /// The name of the pipeline.
    name: string;
}

table QueueMessageDestinationHttpRequest {
    /// The http request Method, i.e. GET, POST.
    method: string;

    /// Headers to be set in the http request.
	/// To understand how this is serialized, see:
	///   - https://golang.org/pkg/net/http/#Header.Write
	///   - https://golang.org/pkg/net/textproto/#Reader.ReadMIMEHeader
    headers: [ubyte];

    /// URL encoded query paramaters to be set in the http request.
    /// This is marshaled and unmarshaled using Encode and ParseQuery.
    ///   - https://golang.org/pkg/net/url/#Values.Encode
    ///   - https://golang.org/pkg/net/url/#ParseQuery
    query_params: string;

    /// URL to send the request to. You may include query parameters in the Url.
	/// The QueryParams specified seperately will be appended to this Url before
	/// making the request.
	///
	/// This is marshaled and unmarshaled using MarshalBinary and UnmarshalBinary.
	///   - https://golang.org/pkg/net/url/#Values
	///   - https://golang.org/pkg/net/url/#ParseRequestURI
    ///   - https://golang.org/pkg/net/url/#URL.MarshalBinary
    ///   - https://golang.org/pkg/net/url/#URL.UnmarshalBinary
    url: [ubyte];
}
