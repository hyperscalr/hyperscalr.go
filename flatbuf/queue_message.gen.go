// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// The format for serializing a queue message.
type QueueMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsQueueMessage(buf []byte, offset flatbuffers.UOffsetT) *QueueMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QueueMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *QueueMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QueueMessage) Table() flatbuffers.Table {
	return rcv._tab
}

/// The unique identifier generated by the client API.
func (rcv *QueueMessage) UniqueId(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *QueueMessage) UniqueIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *QueueMessage) UniqueIdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unique identifier generated by the client API.
func (rcv *QueueMessage) MutateUniqueId(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

/// The pipelines to process.
func (rcv *QueueMessage) Pipelines(obj *Pipeline, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *QueueMessage) PipelinesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The pipelines to process.
/// The API caller's payload of the message.
func (rcv *QueueMessage) Payload(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *QueueMessage) PayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *QueueMessage) PayloadBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The API caller's payload of the message.
func (rcv *QueueMessage) MutatePayload(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func QueueMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func QueueMessageAddUniqueId(builder *flatbuffers.Builder, uniqueId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(uniqueId), 0)
}
func QueueMessageStartUniqueIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func QueueMessageAddPipelines(builder *flatbuffers.Builder, pipelines flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(pipelines), 0)
}
func QueueMessageStartPipelinesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func QueueMessageAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(payload), 0)
}
func QueueMessageStartPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func QueueMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type Pipeline struct {
	_tab flatbuffers.Table
}

func GetRootAsPipeline(buf []byte, offset flatbuffers.UOffsetT) *Pipeline {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Pipeline{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Pipeline) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Pipeline) Table() flatbuffers.Table {
	return rcv._tab
}

/// The name of the pipeline
func (rcv *Pipeline) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the pipeline
func PipelineStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PipelineAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func PipelineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
